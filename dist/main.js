// This file is generated by the build process. Do not edit it directly.

// From https://old.reddit.com/r/learnjavascript/comments/5nbg4h/help_understanding_bind_polyfill_code_from_mdn/
if (!Function.prototype.bind) {
  Function.prototype.bind = function (oThis) {
    if (typeof this !== 'function') {
      // closest thing possible to the ECMAScript 5
      // internal IsCallable function
      throw new TypeError('Function.prototype.bind - what ' + 'is trying to be bound is not callable');
    }

    var aArgs = Array.prototype.slice.call(arguments, 1),
      fToBind = this,
      fNOP = function () {},
      fBound = function () {
        return fToBind.apply(
          // Original - this was throwing errors, idk why:
          // this instanceof fNOP &&
          //   oThis ? this : oThis
          //
          // Updated:
          oThis,
          aArgs.concat(Array.prototype.slice.call(arguments))
        );
      };
    fNOP.prototype = this.prototype;
    fBound.prototype = new fNOP();

    return fBound;
  };
}

// From https://gist.github.com/afuggini/85b02644491f130879a8e789a5b1cea8
(function (root, factory) {
  'use strict';

  /* global define, exports, module */
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(factory);
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    // Browser globals (root is window)
    root.returnExports = factory();
  }
})(this, function () {
  var call = Function.call;
  var prototypeOfObject = Object.prototype;
  var owns = call.bind(prototypeOfObject.hasOwnProperty);
  var isEnumerable = call.bind(prototypeOfObject.propertyIsEnumerable);
  var toStr = call.bind(prototypeOfObject.toString);

  // If JS engine supports accessors creating shortcuts.
  var defineGetter;
  var defineSetter;
  var lookupGetter;
  var lookupSetter;
  var supportsAccessors = owns(prototypeOfObject, '__defineGetter__');
  if (supportsAccessors) {
    /* eslint-disable no-underscore-dangle, no-restricted-properties */
    defineGetter = call.bind(prototypeOfObject.__defineGetter__);
    defineSetter = call.bind(prototypeOfObject.__defineSetter__);
    lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);
    lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);
    /* eslint-enable no-underscore-dangle, no-restricted-properties */
  }

  var isPrimitive = function isPrimitive(o) {
    return o == null || (typeof o !== 'object' && typeof o !== 'function');
  };

  // ES5 15.2.3.2
  // http://es5.github.com/#x15.2.3.2
  if (!Object.getPrototypeOf) {
    // https://github.com/es-shims/es5-shim/issues#issue/2
    // http://ejohn.org/blog/objectgetprototypeof/
    // recommended by fschaefer on github
    //
    // sure, and webreflection says ^_^
    // ... this will nerever possibly return null
    // ... Opera Mini breaks here with infinite loops
    Object.getPrototypeOf = function getPrototypeOf(object) {
      // eslint-disable-next-line no-proto
      var proto = object.__proto__;
      if (proto || proto === null) {
        return proto;
      } else if (toStr(object.constructor) === '[object Function]') {
        return object.constructor.prototype;
      } else if (object instanceof Object) {
        return prototypeOfObject;
      } else {
        // Correctly return null for Objects created with \`Object.create(null)\`
        // (shammed or native) or \`{ __proto__: null}\`.  Also returns null for
        // cross-realm objects on browsers that lack \`__proto__\` support (like
        // IE <11), but that's the best we can do.
        return null;
      }
    };
  }

  // ES5 15.2.3.3
  // http://es5.github.com/#x15.2.3.3

  var doesGetOwnPropertyDescriptorWork = function doesGetOwnPropertyDescriptorWork(object) {
    try {
      object.sentinel = 0;
      return Object.getOwnPropertyDescriptor(object, 'sentinel').value === 0;
    } catch (exception) {
      return false;
    }
  };

  // check whether getOwnPropertyDescriptor works if it's given. Otherwise, shim partially.
  if (Object.defineProperty) {
    var getOwnPropertyDescriptorWorksOnObject = doesGetOwnPropertyDescriptorWork({});
    var getOwnPropertyDescriptorWorksOnDom =
      typeof document === 'undefined' || doesGetOwnPropertyDescriptorWork(document.createElement('div'));
    if (!getOwnPropertyDescriptorWorksOnDom || !getOwnPropertyDescriptorWorksOnObject) {
      var getOwnPropertyDescriptorFallback = Object.getOwnPropertyDescriptor;
    }
  }

  if (!Object.getOwnPropertyDescriptor || getOwnPropertyDescriptorFallback) {
    var ERR_NON_OBJECT = 'Object.getOwnPropertyDescriptor called on a non-object: ';

    /* eslint-disable no-proto */
    Object.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
      if (isPrimitive(object)) {
        throw new TypeError(ERR_NON_OBJECT + object);
      }

      // make a valiant attempt to use the real getOwnPropertyDescriptor
      // for I8's DOM elements.
      if (getOwnPropertyDescriptorFallback) {
        try {
          return getOwnPropertyDescriptorFallback.call(Object, object, property);
        } catch (exception) {
          // try the shim if the real one doesn't work
        }
      }

      var descriptor;

      // If object does not owns property return undefined immediately.
      if (!owns(object, property)) {
        return descriptor;
      }

      // If object has a property then it's for sure \`configurable\`, and
      // probably \`enumerable\`. Detect enumerability though.
      descriptor = {
        enumerable: isEnumerable(object, property),
        configurable: true,
      };

      // If JS engine supports accessor properties then property may be a
      // getter or setter.
      if (supportsAccessors) {
        // Unfortunately \`__lookupGetter__\` will return a getter even
        // if object has own non getter property along with a same named
        // inherited getter. To avoid misbehavior we temporary remove
        // \`__proto__\` so that \`__lookupGetter__\` will return getter only
        // if it's owned by an object.
        var prototype = object.__proto__;
        var notPrototypeOfObject = object !== prototypeOfObject;
        // avoid recursion problem, breaking in Opera Mini when
        // Object.getOwnPropertyDescriptor(Object.prototype, 'toString')
        // or any other Object.prototype accessor
        if (notPrototypeOfObject) {
          object.__proto__ = prototypeOfObject;
        }

        var getter = lookupGetter(object, property);
        var setter = lookupSetter(object, property);

        if (notPrototypeOfObject) {
          // Once we have getter and setter we can put values back.
          object.__proto__ = prototype;
        }

        if (getter || setter) {
          if (getter) {
            descriptor.get = getter;
          }
          if (setter) {
            descriptor.set = setter;
          }
          // If it was accessor property we're done and return here
          // in order to avoid adding \`value\` to the descriptor.
          return descriptor;
        }
      }

      // If we got this far we know that object has an own property that is
      // not an accessor so we set it as a value and return descriptor.
      descriptor.value = object[property];
      descriptor.writable = true;
      return descriptor;
    };
    /* eslint-enable no-proto */
  }

  // ES5 15.2.3.4
  // http://es5.github.com/#x15.2.3.4
  if (!Object.getOwnPropertyNames) {
    Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
      return Object.keys(object);
    };
  }

  // ES5 15.2.3.5
  // http://es5.github.com/#x15.2.3.5
  if (!Object.create) {
    // Contributed by Brandon Benvie, October, 2012
    var createEmpty;
    var supportsProto = !({ __proto__: null } instanceof Object);
    // the following produces false positives
    // in Opera Mini => not a reliable check
    // Object.prototype.__proto__ === null

    // Check for document.domain and active x support
    // No need to use active x approach when document.domain is not set
    // see https://github.com/es-shims/es5-shim/issues/150
    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
    /* global ActiveXObject */
    var shouldUseActiveX = function shouldUseActiveX() {
      // return early if document.domain not set
      if (!document.domain) {
        return false;
      }

      try {
        return !!new ActiveXObject('htmlfile');
      } catch (exception) {
        return false;
      }
    };

    // This supports IE8 when document.domain is used
    // see https://github.com/es-shims/es5-shim/issues/150
    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
    var getEmptyViaActiveX = function getEmptyViaActiveX() {
      var empty;
      var xDoc;

      xDoc = new ActiveXObject('htmlfile');

      var script = 'script';
      xDoc.write('<' + script + '></' + script + '>');
      xDoc.close();

      empty = xDoc.parentWindow.Object.prototype;
      xDoc = null;

      return empty;
    };

    // The original implementation using an iframe
    // before the activex approach was added
    // see https://github.com/es-shims/es5-shim/issues/150
    var getEmptyViaIFrame = function getEmptyViaIFrame() {
      var iframe = document.createElement('iframe');
      var parent = document.body || document.documentElement;
      var empty;

      iframe.style.display = 'none';
      parent.appendChild(iframe);
      // eslint-disable-next-line no-script-url
      iframe.src = 'javascript:';

      empty = iframe.contentWindow.Object.prototype;
      parent.removeChild(iframe);
      iframe = null;

      return empty;
    };

    /* global document */
    if (supportsProto || typeof document === 'undefined') {
      createEmpty = function () {
        return { __proto__: null };
      };
    } else {
      // In old IE __proto__ can't be used to manually set \`null\`, nor does
      // any other method exist to make an object that inherits from nothing,
      // aside from Object.prototype itself. Instead, create a new global
      // object and *steal* its Object.prototype and strip it bare. This is
      // used as the prototype to create nullary objects.
      createEmpty = function () {
        // Determine which approach to use
        // see https://github.com/es-shims/es5-shim/issues/150
        var empty = shouldUseActiveX() ? getEmptyViaActiveX() : getEmptyViaIFrame();

        delete empty.constructor;
        delete empty.hasOwnProperty;
        delete empty.propertyIsEnumerable;
        delete empty.isPrototypeOf;
        delete empty.toLocaleString;
        delete empty.toString;
        delete empty.valueOf;

        var Empty = function Empty() {};
        Empty.prototype = empty;
        // short-circuit future calls
        createEmpty = function () {
          return new Empty();
        };
        return new Empty();
      };
    }

    Object.create = function create(prototype, properties) {
      var object;
      var Type = function Type() {}; // An empty constructor.

      if (prototype === null) {
        object = createEmpty();
      } else {
        if (prototype !== null && isPrimitive(prototype)) {
          // In the native implementation \`parent\` can be \`null\`
          // OR *any* \`instanceof Object\`  (Object|Function|Array|RegExp|etc)
          // Use \`typeof\` tho, b/c in old IE, DOM elements are not \`instanceof Object\`
          // like they are in modern browsers. Using \`Object.create\` on DOM elements
          // is...err...probably inappropriate, but the native version allows for it.
          throw new TypeError('Object prototype may only be an Object or null'); // same msg as Chrome
        }
        Type.prototype = prototype;
        object = new Type();
        // IE has no built-in implementation of \`Object.getPrototypeOf\`
        // neither \`__proto__\`, but this manually setting \`__proto__\` will
        // guarantee that \`Object.getPrototypeOf\` will work as expected with
        // objects created using \`Object.create\`
        // eslint-disable-next-line no-proto
        object.__proto__ = prototype;
      }

      if (properties !== void 0) {
        Object.defineProperties(object, properties);
      }

      return object;
    };
  }

  // ES5 15.2.3.6
  // http://es5.github.com/#x15.2.3.6

  // Patch for WebKit and IE8 standard mode
  // Designed by hax <hax.github.com>
  // related issue: https://github.com/es-shims/es5-shim/issues#issue/5
  // IE8 Reference:
  //     http://msdn.microsoft.com/en-us/library/dd282900.aspx
  //     http://msdn.microsoft.com/en-us/library/dd229916.aspx
  // WebKit Bugs:
  //     https://bugs.webkit.org/show_bug.cgi?id=36423

  var doesDefinePropertyWork = function doesDefinePropertyWork(object) {
    try {
      Object.defineProperty(object, 'sentinel', {});
      return 'sentinel' in object;
    } catch (exception) {
      return false;
    }
  };

  // check whether defineProperty works if it's given. Otherwise,
  // shim partially.
  if (Object.defineProperty) {
    var definePropertyWorksOnObject = doesDefinePropertyWork({});
    var definePropertyWorksOnDom =
      typeof document === 'undefined' || doesDefinePropertyWork(document.createElement('div'));
    if (!definePropertyWorksOnObject || !definePropertyWorksOnDom) {
      var definePropertyFallback = Object.defineProperty,
        definePropertiesFallback = Object.defineProperties;
    }
  }

  if (!Object.defineProperty || definePropertyFallback) {
    var ERR_NON_OBJECT_DESCRIPTOR = 'Property description must be an object: ';
    var ERR_NON_OBJECT_TARGET = 'Object.defineProperty called on non-object: ';
    var ERR_ACCESSORS_NOT_SUPPORTED = 'getters & setters can not be defined on this javascript engine';

    Object.defineProperty = function defineProperty(object, property, descriptor) {
      if (isPrimitive(object)) {
        throw new TypeError(ERR_NON_OBJECT_TARGET + object);
      }
      if (isPrimitive(descriptor)) {
        throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor);
      }
      // make a valiant attempt to use the real defineProperty
      // for I8's DOM elements.
      if (definePropertyFallback) {
        try {
          return definePropertyFallback.call(Object, object, property, descriptor);
        } catch (exception) {
          // try the shim if the real one doesn't work
        }
      }

      // If it's a data property.
      if ('value' in descriptor) {
        // fail silently if 'writable', 'enumerable', or 'configurable'
        // are requested but not supported
        /*
        // alternate approach:
        if ( // can't implement these features; allow false but not true
            ('writable' in descriptor && !descriptor.writable) ||
            ('enumerable' in descriptor && !descriptor.enumerable) ||
            ('configurable' in descriptor && !descriptor.configurable)
        ))
            throw new RangeError(
                'This implementation of Object.defineProperty does not support configurable, enumerable, or writable.'
            );
        */

        if (supportsAccessors && (lookupGetter(object, property) || lookupSetter(object, property))) {
          // As accessors are supported only on engines implementing
          // \`__proto__\` we can safely override \`__proto__\` while defining
          // a property to make sure that we don't hit an inherited
          // accessor.
          /* eslint-disable no-proto */
          var prototype = object.__proto__;
          object.__proto__ = prototypeOfObject;
          // Deleting a property anyway since getter / setter may be
          // defined on object itself.
          delete object[property];
          object[property] = descriptor.value;
          // Setting original \`__proto__\` back now.
          object.__proto__ = prototype;
          /* eslint-enable no-proto */
        } else {
          object[property] = descriptor.value;
        }
      } else {
        var hasGetter = 'get' in descriptor;
        var hasSetter = 'set' in descriptor;
        if (!supportsAccessors && (hasGetter || hasSetter)) {
          throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);
        }
        // If we got that far then getters and setters can be defined !!
        if (hasGetter) {
          defineGetter(object, property, descriptor.get);
        }
        if (hasSetter) {
          defineSetter(object, property, descriptor.set);
        }
      }
      return object;
    };
  }

  // ES5 15.2.3.7
  // http://es5.github.com/#x15.2.3.7
  if (!Object.defineProperties || definePropertiesFallback) {
    Object.defineProperties = function defineProperties(object, properties) {
      // make a valiant attempt to use the real defineProperties
      if (definePropertiesFallback) {
        try {
          return definePropertiesFallback.call(Object, object, properties);
        } catch (exception) {
          // try the shim if the real one doesn't work
        }
      }

      Object.keys(properties).forEach(function (property) {
        if (property !== '__proto__') {
          Object.defineProperty(object, property, properties[property]);
        }
      });
      return object;
    };
  }

  // ES5 15.2.3.8
  // http://es5.github.com/#x15.2.3.8
  if (!Object.seal) {
    Object.seal = function seal(object) {
      if (Object(object) !== object) {
        throw new TypeError('Object.seal can only be called on Objects.');
      }
      // this is misleading and breaks feature-detection, but
      // allows "securable" code to "gracefully" degrade to working
      // but insecure code.
      return object;
    };
  }

  // ES5 15.2.3.9
  // http://es5.github.com/#x15.2.3.9
  if (!Object.freeze) {
    Object.freeze = function freeze(object) {
      if (Object(object) !== object) {
        throw new TypeError('Object.freeze can only be called on Objects.');
      }
      // this is misleading and breaks feature-detection, but
      // allows "securable" code to "gracefully" degrade to working
      // but insecure code.
      return object;
    };
  }

  // detect a Rhino bug and patch it
  try {
    Object.freeze(function () {});
  } catch (exception) {
    Object.freeze = (function (freezeObject) {
      return function freeze(object) {
        if (typeof object === 'function') {
          return object;
        } else {
          return freezeObject(object);
        }
      };
    })(Object.freeze);
  }

  // ES5 15.2.3.10
  // http://es5.github.com/#x15.2.3.10
  if (!Object.preventExtensions) {
    Object.preventExtensions = function preventExtensions(object) {
      if (Object(object) !== object) {
        throw new TypeError('Object.preventExtensions can only be called on Objects.');
      }
      // this is misleading and breaks feature-detection, but
      // allows "securable" code to "gracefully" degrade to working
      // but insecure code.
      return object;
    };
  }

  // ES5 15.2.3.11
  // http://es5.github.com/#x15.2.3.11
  if (!Object.isSealed) {
    Object.isSealed = function isSealed(object) {
      if (Object(object) !== object) {
        throw new TypeError('Object.isSealed can only be called on Objects.');
      }
      return false;
    };
  }

  // ES5 15.2.3.12
  // http://es5.github.com/#x15.2.3.12
  if (!Object.isFrozen) {
    Object.isFrozen = function isFrozen(object) {
      if (Object(object) !== object) {
        throw new TypeError('Object.isFrozen can only be called on Objects.');
      }
      return false;
    };
  }

  // ES5 15.2.3.13
  // http://es5.github.com/#x15.2.3.13
  if (!Object.isExtensible) {
    Object.isExtensible = function isExtensible(object) {
      // 1. If Type(O) is not Object throw a TypeError exception.
      if (Object(object) !== object) {
        throw new TypeError('Object.isExtensible can only be called on Objects.');
      }
      // 2. Return the Boolean value of the [[Extensible]] internal property of O.
      var name = '';
      while (owns(object, name)) {
        name += '?';
      }
      object[name] = true;
      var returnValue = owns(object, name);
      delete object[name];
      return returnValue;
    };
  }
});

// From https://gist.github.com/jonfalcon/4715325
if (!Object.keys) {
  Object.keys = (function () {
    var hasOwnProperty = Object.prototype.hasOwnProperty,
      hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'),
      dontEnums = [
        'toString',
        'toLocaleString',
        'valueOf',
        'hasOwnProperty',
        'isPrototypeOf',
        'propertyIsEnumerable',
        'constructor',
      ],
      dontEnumsLength = dontEnums.length;

    return function (obj) {
      if ((typeof obj !== 'object' && typeof obj !== 'function') || obj === null)
        throw new TypeError('Object.keys called on non-object');
      var result = [];
      for (var prop in obj) {
        if (hasOwnProperty.call(obj, prop)) result.push(prop);
      }
      if (hasDontEnumBug) {
        for (var i = 0; i < dontEnumsLength; i++) {
          if (hasOwnProperty.call(obj, dontEnums[i])) result.push(dontEnums[i]);
        }
      }
      return result;
    };
  })();
}

// From https://vanillajstoolkit.com/polyfills/stringtrim/
if (!String.prototype.trim) {
  String.prototype.trim = function () {
    return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
  };
}

try {
  !function() {
    "use strict";
    var WeekDays = {
      Shortest: [ "S", "M", "T", "W", "T", "F", "S" ],
      Short: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
      Long: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ]
    }, Months = {
      Short: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
      Long: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ]
    };
    function isOnOrAfterNthSunday(date, n) {
      return date.getDate() - date.getDay() >= 7 * (n - 1);
    }
    function getCurrentDate() {
      var now = new Date, offsetHours = 0 == now.getTimezoneOffset() ? function getCentralTimeOffsetHours(date) {
        return date.getMonth() > 2 && date.getMonth() < 10 || 2 === date.getMonth() && isOnOrAfterNthSunday(date, 2) || 10 === date.getMonth() && !isOnOrAfterNthSunday(date, 1) ? 5 : 6;
      }(now) : 0;
      return now.setHours(now.getHours() - offsetHours), now;
    }
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter((function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        }))), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
          _defineProperty(target, key, source[key]);
        })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        }));
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      return (key = function _toPropertyKey(arg) {
        var key = function _toPrimitive(input, hint) {
          if ("object" !== _typeof(input) || null === input) return input;
          var prim = input[Symbol.toPrimitive];
          if (prim !== undefined) {
            var res = prim.call(input, hint || "default");
            if ("object" !== _typeof(res)) return res;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return ("string" === hint ? String : Number)(input);
        }(arg, "string");
        return "symbol" === _typeof(key) ? key : String(key);
      }(key)) in obj ? Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : obj[key] = value, obj;
    }
    var Themes = {
      Light: 1,
      Dark: 2
    }, DaysModes = {
      Shortest: 1,
      Short: 2,
      Long: 3
    }, defaultConfig = {
      numRows: 4,
      startCurrWeekOnRow: 1,
      showUpdateInHrs: !1,
      theme: Themes.Light
    };
    function createDateCell() {
      var dayElem = document.createElement("td");
      return dayElem.innerText = "#", dayElem;
    }
    function createWeek() {
      for (var row = document.createElement("tr"), j = 0; j < WeekDays.Short.length; j++) {
        var dayElem = createDateCell();
        row.appendChild(dayElem);
      }
      return row;
    }
    function createCalendarBody(numWeeks, daysMode) {
      var calendarBody = document.createElement("tbody"), daysHeader = function createCalendarDaysHeader(daysMode) {
        var daysRow = document.createElement("tr");
        daysRow.className += " days";
        for (var i = 0; i < WeekDays.Short.length; i++) {
          var dayElem = document.createElement("td");
          switch (daysRow.appendChild(dayElem), daysMode) {
           case DaysModes.Shortest:
            dayElem.innerText = WeekDays.Shortest[i];
            break;

           case DaysModes.Long:
            dayElem.innerText = WeekDays.Long[i];
            break;

           case DaysModes.Short:
           default:
            dayElem.innerText = WeekDays.Short[i];
          }
        }
        return daysRow;
      }(daysMode);
      calendarBody.appendChild(daysHeader);
      for (var i = 0; i < numWeeks; i++) {
        var row = createWeek();
        calendarBody.appendChild(row);
      }
      return calendarBody;
    }
    function setDateCell(cellDate, today, dayElem) {
      var iterDate = cellDate.getDate(), iterMonth = cellDate.getMonth();
      dayElem.className = dayElem.className.replace(" day-past", "").replace(" month-other", "").replace(" day-today", "").trim(), 
      cellDate < today && (dayElem.className += " day-past"), iterMonth != today.getMonth() && (dayElem.className += " month-other"), 
      iterDate === today.getDate() && iterMonth === today.getMonth() && (dayElem.className += " day-today"), 
      dayElem.innerText = iterDate.toString();
    }
    function populateCalendar(calendarTable, showUpdateInHrs) {
      var now = getCurrentDate();
      !function setCalendarHeader(calendarTable, today) {
        var content = Months.Long[today.getMonth()] + " " + today.getFullYear();
        calendarTable.getElementsByTagName("th")[0].innerText = content;
      }(calendarTable, now), function setCalendarDays(calendarTable, today) {
        var _parseInt, _calendarTable$getAtt, _parseInt2, _calendarTable$getAtt2, rows = calendarTable.getElementsByTagName("tr"), numWeeks = null !== (_parseInt = parseInt(null !== (_calendarTable$getAtt = calendarTable.getAttribute("data-num-rows")) && void 0 !== _calendarTable$getAtt ? _calendarTable$getAtt : "")) && void 0 !== _parseInt ? _parseInt : defaultConfig.numRows, startCurrWeekOnRow = null !== (_parseInt2 = parseInt(null !== (_calendarTable$getAtt2 = calendarTable.getAttribute("data-start-curr-week-on-row")) && void 0 !== _calendarTable$getAtt2 ? _calendarTable$getAtt2 : "")) && void 0 !== _parseInt2 ? _parseInt2 : defaultConfig.startCurrWeekOnRow, startDateOfTodaysWeek = today.getDate() - today.getDay(), iterationDate = new Date(today.getTime());
        iterationDate.setDate(startDateOfTodaysWeek - 7 * startCurrWeekOnRow);
        for (var iterationWeekRow = rows[1], i = 0; i < WeekDays.Short.length * numWeeks; i++) setDateCell(iterationDate, today, iterationWeekRow.getElementsByTagName("td")[i % 7]), 
        iterationDate.setDate(iterationDate.getDate() + 1), numWeeks > 1 && i % 7 == 6 && (iterationWeekRow = rows[2 + ~~(i / 7)]);
      }(calendarTable, now);
      var updateInMs = 864e5 - 60 * now.getHours() * 60 * 1e3 - 60 * now.getMinutes() * 1e3 - 1e3 * now.getSeconds() - now.getMilliseconds();
      showUpdateInHrs && (calendarTable.getElementsByTagName("th")[0].innerText += " | Update in ".concat((updateInMs / 1e3 / 60 / 60).toFixed(2), " hours"));
      setTimeout((function() {
        populateCalendar(calendarTable, showUpdateInHrs);
      }), updateInMs);
    }
    var Calendar = {
      create: function createWidget(config) {
        var _defaultConfig$config = _objectSpread(_objectSpread({}, defaultConfig), config), numRows = _defaultConfig$config.numRows, startCurrWeekOnRow = _defaultConfig$config.startCurrWeekOnRow, showUpdateInHrs = _defaultConfig$config.showUpdateInHrs, theme = _defaultConfig$config.theme, daysMode = _defaultConfig$config.daysMode, calendarElem = function CreateTable(theme) {
          var calendarElem = document.createElement("table");
          return calendarElem.className += " calendar widget", calendarElem.className += theme === Themes.Dark ? " dark" : " light", 
          calendarElem.setAttribute("cellspacing", "0"), calendarElem.setAttribute("cellpadding", "4"), 
          calendarElem;
        }(theme);
        calendarElem.setAttribute("data-num-rows", numRows.toString()), calendarElem.setAttribute("data-start-curr-week-on-row", startCurrWeekOnRow.toString());
        var calendarTHead = document.createElement("thead");
        calendarElem.appendChild(calendarTHead);
        var calendarTh = function createCalendarHeader() {
          var calendarTh = document.createElement("th");
          return calendarTh.setAttribute("colspan", "7"), calendarTh.innerText = "Month Year", 
          calendarTh;
        }();
        calendarTHead.appendChild(calendarTh);
        var calendarBody = createCalendarBody(numRows, daysMode);
        return calendarElem.appendChild(calendarBody), populateCalendar(calendarElem, showUpdateInHrs), 
        {
          returnElem: calendarElem,
          minWidth: 252,
          minHeight: 176
        };
      },
      Themes: Themes,
      CalendarModes: {
        Month: 1,
        Week: 2
      },
      DaysModes: DaysModes
    };
    function logError(err) {
      var consoleElem = function getConsoleElem() {
        var consoleElem = document.getElementById("consoleElem");
        if (!consoleElem) throw new Error("Could not find Console element in page");
        return consoleElem;
      }();
      if (consoleElem.innerText += "--------------\nError details:\n", !(err instanceof Error)) return consoleElem.innerText += "  ".concat(err, "\n"), 
      void (consoleElem.innerText += "--------------\n");
      for (var key in err) {
        var val = err[key];
        consoleElem.innerText += "  ".concat(key, ": ").concat(val, "\n");
      }
      console.error(err), consoleElem.innerText += "--------------\n";
    }
    function getLeftZeroedString(input, numDigits) {
      if (numDigits > 3) throw new Error("numDigits must be <= 3");
      return ("000" + input).slice(-numDigits);
    }
    function setTime(clockElem, showSeconds) {
      clockElem.innerText = function getTimeString(showSeconds) {
        var now = getCurrentDate(), hours = now.getHours(), amPm = hours >= 12 ? " PM" : " AM", hoursStr = getLeftZeroedString(hours > 12 ? hours - 12 : hours, 2);
        "00" === hoursStr && (hoursStr = "12");
        var minsStr = getLeftZeroedString(now.getMinutes(), 2), toReturn = "".concat(hoursStr, ":").concat(minsStr);
        return showSeconds && (toReturn += ":" + getLeftZeroedString(now.getSeconds(), 2)), 
        toReturn + amPm;
      }(showSeconds);
      var updateInMs = showSeconds ? 1e3 : 1e3 * (60 - (new Date).getSeconds());
      setTimeout((function() {
        setTime(clockElem, showSeconds);
      }), updateInMs);
    }
    var Clock = {
      create: function Clock_createWidget(config) {
        var showSeconds = config.showSeconds, clockElem = document.createElement("div");
        return clockElem.className += " clock centered widget", setTime(clockElem, null != showSeconds && showSeconds), 
        {
          returnElem: clockElem,
          minWidth: showSeconds ? 179 : 133,
          minHeight: 21
        };
      }
    };
    function setDate(dateElem, showUpdateIn) {
      dateElem.innerText = function getDateString() {
        var now = getCurrentDate(), month = getLeftZeroedString(now.getMonth() + 1, 2), date = getLeftZeroedString(now.getDate(), 2), year = now.getFullYear().toString().slice(-2);
        return "".concat(month, "/").concat(date, "/").concat(year);
      }();
      var now = getCurrentDate(), updateInMs = 864e5 - 1e3 * (60 * now.getHours() * 60 + 60 * now.getMinutes() + now.getSeconds());
      if (showUpdateIn) {
        var updateInHours = (updateInMs / 1e3 / 60 / 60).toFixed(2);
        dateElem.innerText += " (Update in: ".concat(updateInHours, " hrs.)");
      }
      setTimeout((function() {
        setDate(dateElem, showUpdateIn);
      }), updateInMs);
    }
    var DateWidget = {
      create: function Date_createWidget(config) {
        var showUpdateIn = config.showUpdateIn, dateElem = document.createElement("div");
        return dateElem.className += " date centered widget", setDate(dateElem, null != showUpdateIn && showUpdateIn), 
        {
          returnElem: dateElem,
          minWidth: 130,
          minHeight: 21
        };
      }
    };
    function Day_typeof(obj) {
      return Day_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, Day_typeof(obj);
    }
    function Day_ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter((function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        }))), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function Day_objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? Day_ownKeys(Object(source), !0).forEach((function(key) {
          Day_defineProperty(target, key, source[key]);
        })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : Day_ownKeys(Object(source)).forEach((function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        }));
      }
      return target;
    }
    function Day_defineProperty(obj, key, value) {
      return (key = function Day_toPropertyKey(arg) {
        var key = function Day_toPrimitive(input, hint) {
          if ("object" !== Day_typeof(input) || null === input) return input;
          var prim = input[Symbol.toPrimitive];
          if (prim !== undefined) {
            var res = prim.call(input, hint || "default");
            if ("object" !== Day_typeof(res)) return res;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return ("string" === hint ? String : Number)(input);
        }(arg, "string");
        return "symbol" === Day_typeof(key) ? key : String(key);
      }(key)) in obj ? Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : obj[key] = value, obj;
    }
    var DisplayModes = {
      Short: 1,
      Long: 2
    }, Day_defaultConfig = {
      displayMode: DisplayModes.Long
    };
    function setDay(dayElem, displayMode) {
      var now = getCurrentDate(), updateInMs = 864e5 - 1e3 * (60 * now.getHours() * 60 + 60 * now.getMinutes() + now.getSeconds());
      switch (displayMode) {
       case DisplayModes.Short:
        dayElem.innerText = WeekDays.Short[now.getDay()];
        break;

       case DisplayModes.Long:
       default:
        dayElem.innerText = WeekDays.Long[now.getDay()];
      }
      setTimeout((function() {
        setDay(dayElem, displayMode);
      }), updateInMs);
    }
    var DayWidget = {
      create: function Day_createWidget(config) {
        var displayMode = Day_objectSpread(Day_objectSpread({}, Day_defaultConfig), config).displayMode, dateElem = document.createElement("div");
        return dateElem.className += " day centered widget", setDay(dateElem, displayMode), 
        {
          returnElem: dateElem,
          minWidth: 130,
          minHeight: 21
        };
      },
      DisplayModes: DisplayModes
    };
    function Resolution_typeof(obj) {
      return Resolution_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, Resolution_typeof(obj);
    }
    function Resolution_ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter((function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        }))), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function Resolution_objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? Resolution_ownKeys(Object(source), !0).forEach((function(key) {
          Resolution_defineProperty(target, key, source[key]);
        })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : Resolution_ownKeys(Object(source)).forEach((function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        }));
      }
      return target;
    }
    function Resolution_defineProperty(obj, key, value) {
      return (key = function Resolution_toPropertyKey(arg) {
        var key = function Resolution_toPrimitive(input, hint) {
          if ("object" !== Resolution_typeof(input) || null === input) return input;
          var prim = input[Symbol.toPrimitive];
          if (prim !== undefined) {
            var res = prim.call(input, hint || "default");
            if ("object" !== Resolution_typeof(res)) return res;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return ("string" === hint ? String : Number)(input);
        }(arg, "string");
        return "symbol" === Resolution_typeof(key) ? key : String(key);
      }(key)) in obj ? Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : obj[key] = value, obj;
    }
    var Resolution_defaultConfig = {
      showRefreshButton: !0
    };
    function setContent(widgetElem) {
      var spanElem = widgetElem.querySelector("span");
      spanElem || (spanElem = document.createElement("span"), widgetElem.appendChild(spanElem)), 
      spanElem.innerText = "".concat(window.innerWidth, " x ").concat(window.innerHeight);
    }
    var Resolution = {
      create: function Resolution_createWidget(config) {
        var showRefreshButton = Resolution_objectSpread(Resolution_objectSpread({}, Resolution_defaultConfig), config).showRefreshButton, widgetElem = document.createElement("div");
        widgetElem.className += " resolution centered widget";
        var containerElem = document.createElement("div");
        if (setContent(containerElem), widgetElem.appendChild(containerElem), showRefreshButton) {
          var refreshButton = function createRefreshButton(widgetElem) {
            var refreshButton = document.createElement("button");
            return refreshButton.innerText = "↻", refreshButton.addEventListener("click", (function() {
              return setContent(widgetElem);
            })), refreshButton;
          }(containerElem);
          containerElem.appendChild(refreshButton);
        }
        return {
          returnElem: widgetElem,
          minWidth: showRefreshButton ? 105 : 71,
          minHeight: showRefreshButton ? 30 : 21
        };
      }
    };
    function grid_typeof(obj) {
      return grid_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, grid_typeof(obj);
    }
    function grid_ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter((function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        }))), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function grid_objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? grid_ownKeys(Object(source), !0).forEach((function(key) {
          grid_defineProperty(target, key, source[key]);
        })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : grid_ownKeys(Object(source)).forEach((function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        }));
      }
      return target;
    }
    function grid_defineProperty(obj, key, value) {
      return (key = function grid_toPropertyKey(arg) {
        var key = function grid_toPrimitive(input, hint) {
          if ("object" !== grid_typeof(input) || null === input) return input;
          var prim = input[Symbol.toPrimitive];
          if (prim !== undefined) {
            var res = prim.call(input, hint || "default");
            if ("object" !== grid_typeof(res)) return res;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return ("string" === hint ? String : Number)(input);
        }(arg, "string");
        return "symbol" === grid_typeof(key) ? key : String(key);
      }(key)) in obj ? Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : obj[key] = value, obj;
    }
    var grid_defaultConfig = {
      rows: 6,
      columns: 6,
      showHalfCells: !1
    };
    var Grid = {
      create: function grid_createWidget(config) {
        var _defaultConfig$config = grid_objectSpread(grid_objectSpread({}, grid_defaultConfig), config), rows = _defaultConfig$config.rows, columns = _defaultConfig$config.columns, widgetElem = document.createElement("div");
        widgetElem.className += " grid widget";
        var gridElem = document.createElement("table");
        return config.showHalfCells && (rows *= 2, columns *= 2), function grid_setContent(gridElem, rows, columns) {
          for (var i = 0; i < rows; i += 1) for (var row = gridElem.insertRow(), j = 0; j < columns; j += 1) row.insertCell().innerHTML = "&nbsp;";
        }(gridElem, rows, columns), widgetElem.appendChild(gridElem), {
          returnElem: widgetElem,
          minWidth: 800,
          minHeight: 506
        };
      }
    };
    function WidgetManager_typeof(obj) {
      return WidgetManager_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, WidgetManager_typeof(obj);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
        "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, WidgetManager_toPropertyKey(descriptor.key), descriptor);
      }
    }
    function WidgetManager_defineProperty(obj, key, value) {
      return (key = WidgetManager_toPropertyKey(key)) in obj ? Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : obj[key] = value, obj;
    }
    function WidgetManager_toPropertyKey(arg) {
      var key = function WidgetManager_toPrimitive(input, hint) {
        if ("object" !== WidgetManager_typeof(input) || null === input) return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== undefined) {
          var res = prim.call(input, hint || "default");
          if ("object" !== WidgetManager_typeof(res)) return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === hint ? String : Number)(input);
      }(arg, "string");
      return "symbol" === WidgetManager_typeof(key) ? key : String(key);
    }
    var WidgetManager = function() {
      function WidgetManager(appElem) {
        !function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }(this, WidgetManager), this.appElem = appElem, this.availableWidth = document.documentElement.clientWidth - 2, 
        this.availableHeight = document.documentElement.clientHeight - 2;
      }
      return function _createClass(Constructor, protoProps, staticProps) {
        return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), 
        Object.defineProperty(Constructor, "prototype", {
          writable: !1
        }), Constructor;
      }(WidgetManager, [ {
        key: "createWidget",
        value: function createWidget(widgetName, options) {
          var widget = WidgetManager.Widgets[widgetName];
          if (!widget) throw new Error("Could not find widget with name ".concat(widgetName));
          var element = widget.create(null != options ? options : widget.defaultConfig).returnElem, calculatedWidth = options.widthColumns * (this.availableWidth / WidgetManager.GridColumns), calculatedHeight = options.heightRows * (this.availableHeight / WidgetManager.GridRows), calculatedX = options.xColumn * (this.availableWidth / WidgetManager.GridColumns), calculatedY = options.yColumn * (this.availableHeight / WidgetManager.GridRows);
          element.style.left = Math.round(calculatedX) + "px", element.style.top = Math.round(calculatedY) + "px", 
          element.style.width = Math.round(calculatedWidth) + "px", element.style.height = Math.round(calculatedHeight) + "px", 
          this.appElem.appendChild(element);
        }
      } ]), WidgetManager;
    }();
    WidgetManager_defineProperty(WidgetManager, "GridColumns", 12), WidgetManager_defineProperty(WidgetManager, "GridRows", 12), 
    WidgetManager_defineProperty(WidgetManager, "Widgets", {
      clock: {
        create: Clock.create,
        defaultConfig: {}
      },
      date: {
        create: DateWidget.create,
        defaultConfig: {}
      },
      resolution: {
        create: Resolution.create,
        defaultConfig: {}
      },
      calendar: {
        create: Calendar.create,
        defaultConfig: {}
      },
      grid: {
        create: Grid.create,
        defaultConfig: {}
      },
      day: {
        create: DayWidget.create,
        defaultConfig: {}
      }
    }), document.addEventListener("DOMContentLoaded", function wrapTryCatch(fn) {
      return function() {
        try {
          fn();
        } catch (err) {
          logError(err);
        }
      };
    }((function handleOnLoad() {
      var appElem = document.getElementById("app");
      if (!appElem) throw new Error("Could not find app element in page");
      var widgetManager = new WidgetManager(appElem);
      widgetManager.createWidget("grid", {
        xColumn: 0,
        yColumn: 0,
        widthColumns: WidgetManager.GridColumns,
        heightRows: WidgetManager.GridRows,
        columns: WidgetManager.GridColumns,
        rows: WidgetManager.GridRows,
        showHalfCells: !1
      }), widgetManager.createWidget("day", {
        xColumn: 1,
        yColumn: 1,
        widthColumns: 1,
        heightRows: 1,
        displayMode: DayWidget.DisplayModes.Long
      }), widgetManager.createWidget("date", {
        xColumn: 3,
        yColumn: 1,
        widthColumns: 2,
        heightRows: 1
      }), widgetManager.createWidget("clock", {
        xColumn: 6,
        yColumn: 1,
        widthColumns: 2,
        heightRows: 1
      }), widgetManager.createWidget("calendar", {
        numRows: 4,
        startCurrWeekOnRow: 1,
        showUpdateInHrs: !1,
        theme: Calendar.Themes.Light,
        xColumn: 4,
        yColumn: 4,
        widthColumns: 4,
        heightRows: 4,
        daysMode: Calendar.DaysModes.Shortest
      }), widgetManager.createWidget("resolution", {
        xColumn: 5,
        yColumn: 9,
        widthColumns: 3,
        heightRows: 1
      });
    })));
  }();
} catch (err) {
  var _consoleElem = document.getElementById("consoleElem");
  if(!_consoleElem) {
    _consoleElem = document.createElement("pre");
    _consoleElem.id = "consoleElem";
    document.body.appendChild(_consoleElem);
  }

  _consoleElem.innerText += "--------------\nError details:\n";
  for (var key in err) {
    _consoleElem.innerText += key + ": " + err[key] + "\n";
  }
  _consoleElem.innerText += "--------------\n";
}